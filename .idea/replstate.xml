<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1455834771281">{:repl-history {:ide [], :local [&quot;(with-open [rdr (clojure.java.io/reader \&quot;/etc/passwd\&quot;)]\n  (line-seq rdr))&quot; &quot;(with-open [rdr (clojure.java.io/reader \&quot;/etc/passwd\&quot;)]\n  (doall (line-seq rdr)))&quot; &quot;(with-open [rdr (clojure.java.io/reader \&quot;/Users/wickedwukong/Dropbox/company/SP-Management/Fund-management.csv\&quot;)]\n  (doall (line-seq rdr)))&quot; &quot;\n(defn verify-line [[line-number line]]\n  (println \&quot;in verify-line: \&quot; line)\n  {:result \&quot;good\&quot;, :line-number line-number})\n\n(defn with-index [lines]\n  (map-indexed  (fn [idx itm] [idx itm]) lines))\n\n(defn verify-lines [lines]\n  (map verify-line (with-index lines)))\n\n(defn read-into-lines [file-name]\n  (with-open [rdr (clojure.java.io/reader file-name)]\n    (doall (line-seq rdr))))\n\n(defn verify-sp-payment []\n  (let [lines (read-into-lines \&quot;/Users/wickedwukong/Dropbox/company/SP-Management/Fund-management.csv\&quot;)]\n    (verify-lines lines)))&quot; &quot;(rest '(:a :b))&quot; &quot;(defn verify-sp-payment []\n  (let [lines (read-into-lines \&quot;/Users/wickedwukong/Dropbox/company/SP-Management/Fund-management.csv\&quot;)]\n    (verify-lines (rest lines))))&quot; &quot;(.split (\&quot;abc,cde\&quot; \&quot;,\&quot;))&quot; &quot;(.split \&quot;abc,cde\&quot; \&quot;,\&quot;)&quot; &quot;(map println (.split \&quot;abc,cde\&quot; \&quot;,\&quot;))&quot; &quot;(1 (.split \&quot;abc,cde\&quot; \&quot;,\&quot;))&quot; &quot;(get 1 (.split \&quot;abc,cde\&quot; \&quot;,\&quot;))&quot; &quot;(get 0\n     (.split \&quot;abc,cde\&quot; \&quot;,\&quot;))&quot; &quot;(first\n     (.split \&quot;abc,cde\&quot; \&quot;,\&quot;))&quot; &quot;(defn verify-line [[line-number line]]\n  (let [row-cells (.split line \&quot;,\&quot;)]\n    (let [invoice-no (nth row-cells 1)]\n      [total-income (nth row-cells 5)]\n      [before-vat (nth row-cells 6)]\n      {:result \&quot;good\&quot;, :line-number line-number, :invoice-no: invoice-no})\n    ))\n\n(defn with-index [lines]\n  (map-indexed  (fn [idx itm] [idx itm]) lines))\n\n(defn verify-lines [lines]\n  (map verify-line (with-index lines)))\n\n(defn read-into-lines [file-name]\n  (with-open [rdr (clojure.java.io/reader file-name)]\n    (doall (line-seq rdr))))\n\n(defn verify-sp-payment []\n  (let [lines (read-into-lines \&quot;/Users/wickedwukong/Dropbox/company/SP-Management/Fund-management.csv\&quot;)]\n    (verify-lines (rest lines))))&quot; &quot;(defn verify-line [[line-number line]]\n  (let [row-cells (.split line \&quot;,\&quot;)]\n    (let [invoice-no (nth row-cells 1)]\n      [total-income (nth row-cells 5)]\n      [before-vat (nth row-cells 6)]\n      {:result \&quot;good\&quot;, :line-number line-number, :invoice-no invoice-no})\n    ))\n\n(defn with-index [lines]\n  (map-indexed  (fn [idx itm] [idx itm]) lines))\n\n(defn verify-lines [lines]\n  (map verify-line (with-index lines)))\n\n(defn read-into-lines [file-name]\n  (with-open [rdr (clojure.java.io/reader file-name)]\n    (doall (line-seq rdr))))\n\n(defn verify-sp-payment []\n  (let [lines (read-into-lines \&quot;/Users/wickedwukong/Dropbox/company/SP-Management/Fund-management.csv\&quot;)]\n    (verify-lines (rest lines))))&quot; &quot;(defn verify-line [[line-number line]]\n  (let [row-cells (.split line \&quot;,\&quot;)]\n    (let [invoice-no (nth row-cells 1)]\n      [total-income (nth row-cells 5)]\n      [before-vat (nth row-cells 6)]\n      {:result \&quot;good\&quot;, :line-number line-number, :invoice-no invoice-no})\n    ))&quot; &quot;(defn verify-line [[line-number line]]\n  (let [row-cells (.split line \&quot;,\&quot;)]\n    (let [invoice-no (nth row-cells 1)\n          total-income (nth row-cells 5)\n          before-vat (nth row-cells 6)]\n      {:result \&quot;good\&quot;, :line-number line-number, :invoice-no invoice-no})\n    ))\n&quot; &quot;(verify-sp-payment)&quot;], :remote []}}</component>
</project>